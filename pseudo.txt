runMothLearnerMNIST.py



featureArray = generateDownsampledMNISTSet(preP)

	imageArray = extractMNISTFeatureArray( mnist, ... )

	featureArray = cropDownsampleVectorizeImageStack( imageArray, ... )

	overallAve = averageImageStack( featureArray, ... )

	featureArray = selectActivePixels( featureArray, ... )

		showFeatureArrayThumbnails( classAves )

import modelParams

modelParams = initializeConnectionMatrices( modelParams )

expParams = setMNISTExperimentParams( classLabels, ... )

simResults = sdeWrapper( modelParams, experimentParams, ... )

	thisRun = sdeEvoMNIST( featureArray, modelParams, expParams, ... )

		inputs = piecewiseLinearPseudoSigmoid(inputs)

resp = viewENresponses( simResults, modelParams, experimentParams, classLabels, ... )

outputLogL = classifyDigitsViaLogLikelihood( resp )

outputThresholding = classifyDigitsViaThresholding( resp, ... )

